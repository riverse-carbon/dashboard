import { useTransactions } from 'components/hooks/api/transactions';
import getFakeTransactions from 'components/indexPage/fakeData';
import Hero from 'components/indexPage/Hero';
import TransactionsWidget from 'components/indexPage/TransactionsWidget';
import type { Transaction, TransactionsSortedByMonth } from 'components/types/transactions';
import Documentation from 'components/widgets/Documentation';
import WidgetWrapper from 'components/widgets/WidgetWrapper';
import Head from 'next/head';

type PagePropsType = {
  data: TransactionsSortedByMonth[];
  total: number;
};

// TODO: ask William about staleTime on transactions

const Page = ({ data, total }: PagePropsType): JSX.Element => {
  // use initial data from getStaticProps and fetch all transactions data if clicked on 'more' button
  const { data: transactions, isError } = useTransactions(data);

  return (
    <>
      <Head>
        <title>Riverse Dashboard welcome page</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.png' />
      </Head>
      <h1 className='sr-only'>Carbon removal</h1>
      <div className='max-w-screen-lg mx-auto space-y-10'>
        <Hero total={total} />
        <a href='https://www.riverse.io/registry' target='_blank' rel='noreferrer' className='text-center block'>
          Take a look at the transaction register
        </a>
        <WidgetWrapper>
          {isError ? <p className='text-xl'>Error while loading data</p> : <TransactionsWidget data={transactions} />}
        </WidgetWrapper>
        <WidgetWrapper>
          <Documentation />
        </WidgetWrapper>
      </div>
    </>
  );
};

export default Page;

export function getStaticProps () {
  // replace by intial data when routes done
  const res = getFakeTransactions();

  const data: Transaction[] = res.data;
  // sum of credits removed
  let totalRiverse = 0;
  const sortedByMonth: TransactionsSortedByMonth[] = [];

  const sameMonthAndYear = (dateOne: string, dateTwo: string) => {
    const dateOneAsDate = new Date(dateOne);
    const dateTwoAsDate = new Date(dateTwo);
    const dateOneYear = dateOneAsDate.getFullYear();
    const dateOneMonth = dateOneAsDate.getMonth();
    const dateTwoMonth = dateTwoAsDate.getMonth();
    const dateTwoYear = dateTwoAsDate.getFullYear();

    return dateOneMonth === dateTwoMonth && dateOneYear === dateTwoYear;
  };

  data.forEach(transaction => {
    const { carbonAmount } = transaction;
    const currMonth = transaction.;
    const currMonthIndex = sortedByMonth.findIndex(date => sameMonthAndYear(date.month, currMonth));

    totalRiverse += carbonAmount;
    // find corresponding month or add a new one if it doesn't exist
    if (currMonthIndex === -1) {
      sortedByMonth.push({ month: currMonth, total: carbonAmount, transactions: [transaction] });
    } else {
      sortedByMonth[currMonthIndex].total += carbonAmount;
      sortedByMonth[currMonthIndex].transactions.push(transaction);
    }
  });

  sortedByMonth.sort((a, b) => Date.parse(b.month) - Date.parse(a.month));

  // refetch  initial data every day with revalidate (in seconds)
  return { props: { data: sortedByMonth, total: totalRiverse }, revalidate: 86400 };
}
